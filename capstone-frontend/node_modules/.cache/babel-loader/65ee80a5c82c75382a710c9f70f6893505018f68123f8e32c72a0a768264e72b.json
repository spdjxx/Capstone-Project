{"ast":null,"code":"// src/devBrowser.ts\nvar DEV_BROWSER_JWT_KEY = \"__clerk_db_jwt\";\nvar DEV_BROWSER_JWT_HEADER = \"Clerk-Db-Jwt\";\nfunction setDevBrowserJWTInURL(url, jwt) {\n  const resultURL = new URL(url);\n  const jwtFromSearch = resultURL.searchParams.get(DEV_BROWSER_JWT_KEY);\n  resultURL.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  const jwtToSet = jwtFromSearch || jwt;\n  if (jwtToSet) {\n    resultURL.searchParams.set(DEV_BROWSER_JWT_KEY, jwtToSet);\n  }\n  return resultURL;\n}\nfunction extractDevBrowserJWTFromURL(url) {\n  const jwt = readDevBrowserJwtFromSearchParams(url);\n  const cleanUrl = removeDevBrowserJwt(url);\n  if (cleanUrl.href !== url.href && typeof globalThis.history !== \"undefined\") {\n    globalThis.history.replaceState(null, \"\", removeDevBrowserJwt(url));\n  }\n  return jwt;\n}\nvar readDevBrowserJwtFromSearchParams = url => {\n  return url.searchParams.get(DEV_BROWSER_JWT_KEY) || \"\";\n};\nvar removeDevBrowserJwt = url => {\n  return removeDevBrowserJwtFromURLSearchParams(removeLegacyDevBrowserJwt(url));\n};\nvar removeDevBrowserJwtFromURLSearchParams = _url => {\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  return url;\n};\nvar removeLegacyDevBrowserJwt = _url => {\n  const DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n  const DEV_BROWSER_JWT_LEGACY_KEY = \"__dev_session\";\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_LEGACY_KEY);\n  url.hash = decodeURI(url.hash).replace(DEV_BROWSER_JWT_MARKER_REGEXP, \"\");\n  if (url.href.endsWith(\"#\")) {\n    url.hash = \"\";\n  }\n  return url;\n};\nexport { DEV_BROWSER_JWT_KEY, DEV_BROWSER_JWT_HEADER, setDevBrowserJWTInURL, extractDevBrowserJWTFromURL };","map":{"version":3,"names":["DEV_BROWSER_JWT_KEY","DEV_BROWSER_JWT_HEADER","setDevBrowserJWTInURL","url","jwt","resultURL","URL","jwtFromSearch","searchParams","get","delete","jwtToSet","set","extractDevBrowserJWTFromURL","readDevBrowserJwtFromSearchParams","cleanUrl","removeDevBrowserJwt","href","globalThis","history","replaceState","removeDevBrowserJwtFromURLSearchParams","removeLegacyDevBrowserJwt","_url","DEV_BROWSER_JWT_MARKER_REGEXP","DEV_BROWSER_JWT_LEGACY_KEY","hash","decodeURI","replace","endsWith"],"sources":["/Users/shaud/Desktop/c6-mycode/cs/capstone/node_modules/@clerk/shared/src/devBrowser.ts"],"sourcesContent":["export const DEV_BROWSER_JWT_KEY = '__clerk_db_jwt';\nexport const DEV_BROWSER_JWT_HEADER = 'Clerk-Db-Jwt';\n\n// Sets the dev_browser JWT in the hash or the search\nexport function setDevBrowserJWTInURL(url: URL, jwt: string): URL {\n  const resultURL = new URL(url);\n\n  // extract & strip existing jwt from search\n  const jwtFromSearch = resultURL.searchParams.get(DEV_BROWSER_JWT_KEY);\n  resultURL.searchParams.delete(DEV_BROWSER_JWT_KEY);\n\n  // Existing jwt takes precedence\n  const jwtToSet = jwtFromSearch || jwt;\n\n  if (jwtToSet) {\n    resultURL.searchParams.set(DEV_BROWSER_JWT_KEY, jwtToSet);\n  }\n\n  return resultURL;\n}\n\n/**\n * Gets the __clerk_db_jwt JWT from either the hash or the search\n * Side effect:\n * Removes __clerk_db_jwt JWT from the URL (hash and searchParams) and updates the browser history\n */\nexport function extractDevBrowserJWTFromURL(url: URL): string {\n  const jwt = readDevBrowserJwtFromSearchParams(url);\n  const cleanUrl = removeDevBrowserJwt(url);\n  if (cleanUrl.href !== url.href && typeof globalThis.history !== 'undefined') {\n    globalThis.history.replaceState(null, '', removeDevBrowserJwt(url));\n  }\n  return jwt;\n}\n\nconst readDevBrowserJwtFromSearchParams = (url: URL) => {\n  return url.searchParams.get(DEV_BROWSER_JWT_KEY) || '';\n};\n\nconst removeDevBrowserJwt = (url: URL) => {\n  return removeDevBrowserJwtFromURLSearchParams(removeLegacyDevBrowserJwt(url));\n};\n\nconst removeDevBrowserJwtFromURLSearchParams = (_url: URL) => {\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_KEY);\n  return url;\n};\n\n/**\n * Removes the __clerk_db_jwt JWT from the URL hash, as well as\n * the legacy __dev_session JWT from the URL searchParams\n * We no longer need to use this value, however, we should remove it from the URL\n * Existing v4 apps will write the JWT to the hash and the search params in order to ensure\n * backwards compatibility with older v4 apps.\n * The only use case where this is needed now is when a user upgrades to clerk@5 locally\n * without changing the component's version on their dashboard.\n * In this scenario, the AP@4 -> localhost@5 redirect will still have the JWT in the hash,\n * in which case we need to remove it.\n */\nconst removeLegacyDevBrowserJwt = (_url: URL) => {\n  const DEV_BROWSER_JWT_MARKER_REGEXP = /__clerk_db_jwt\\[(.*)\\]/;\n  const DEV_BROWSER_JWT_LEGACY_KEY = '__dev_session';\n  const url = new URL(_url);\n  url.searchParams.delete(DEV_BROWSER_JWT_LEGACY_KEY);\n  url.hash = decodeURI(url.hash).replace(DEV_BROWSER_JWT_MARKER_REGEXP, '');\n  if (url.href.endsWith('#')) {\n    url.hash = '';\n  }\n  return url;\n};\n"],"mappings":";AAAO,IAAMA,mBAAA,GAAsB;AAC5B,IAAMC,sBAAA,GAAyB;AAG/B,SAASC,sBAAsBC,GAAA,EAAUC,GAAA,EAAkB;EAChE,MAAMC,SAAA,GAAY,IAAIC,GAAA,CAAIH,GAAG;EAG7B,MAAMI,aAAA,GAAgBF,SAAA,CAAUG,YAAA,CAAaC,GAAA,CAAIT,mBAAmB;EACpEK,SAAA,CAAUG,YAAA,CAAaE,MAAA,CAAOV,mBAAmB;EAGjD,MAAMW,QAAA,GAAWJ,aAAA,IAAiBH,GAAA;EAElC,IAAIO,QAAA,EAAU;IACZN,SAAA,CAAUG,YAAA,CAAaI,GAAA,CAAIZ,mBAAA,EAAqBW,QAAQ;EAC1D;EAEA,OAAON,SAAA;AACT;AAOO,SAASQ,4BAA4BV,GAAA,EAAkB;EAC5D,MAAMC,GAAA,GAAMU,iCAAA,CAAkCX,GAAG;EACjD,MAAMY,QAAA,GAAWC,mBAAA,CAAoBb,GAAG;EACxC,IAAIY,QAAA,CAASE,IAAA,KAASd,GAAA,CAAIc,IAAA,IAAQ,OAAOC,UAAA,CAAWC,OAAA,KAAY,aAAa;IAC3ED,UAAA,CAAWC,OAAA,CAAQC,YAAA,CAAa,MAAM,IAAIJ,mBAAA,CAAoBb,GAAG,CAAC;EACpE;EACA,OAAOC,GAAA;AACT;AAEA,IAAMU,iCAAA,GAAqCX,GAAA,IAAa;EACtD,OAAOA,GAAA,CAAIK,YAAA,CAAaC,GAAA,CAAIT,mBAAmB,KAAK;AACtD;AAEA,IAAMgB,mBAAA,GAAuBb,GAAA,IAAa;EACxC,OAAOkB,sCAAA,CAAuCC,yBAAA,CAA0BnB,GAAG,CAAC;AAC9E;AAEA,IAAMkB,sCAAA,GAA0CE,IAAA,IAAc;EAC5D,MAAMpB,GAAA,GAAM,IAAIG,GAAA,CAAIiB,IAAI;EACxBpB,GAAA,CAAIK,YAAA,CAAaE,MAAA,CAAOV,mBAAmB;EAC3C,OAAOG,GAAA;AACT;AAaA,IAAMmB,yBAAA,GAA6BC,IAAA,IAAc;EAC/C,MAAMC,6BAAA,GAAgC;EACtC,MAAMC,0BAAA,GAA6B;EACnC,MAAMtB,GAAA,GAAM,IAAIG,GAAA,CAAIiB,IAAI;EACxBpB,GAAA,CAAIK,YAAA,CAAaE,MAAA,CAAOe,0BAA0B;EAClDtB,GAAA,CAAIuB,IAAA,GAAOC,SAAA,CAAUxB,GAAA,CAAIuB,IAAI,EAAEE,OAAA,CAAQJ,6BAAA,EAA+B,EAAE;EACxE,IAAIrB,GAAA,CAAIc,IAAA,CAAKY,QAAA,CAAS,GAAG,GAAG;IAC1B1B,GAAA,CAAIuB,IAAA,GAAO;EACb;EACA,OAAOvB,GAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}