{"ast":null,"code":"import React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\n\n// Shared state between server components and client components\nconst noop = () => {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/noop();\nconst OBJECT = Object;\nconst isUndefined = v => v === UNDEFINED;\nconst isFunction = v => typeof v == 'function';\nconst mergeObjects = (a, b) => ({\n  ...a,\n  ...b\n});\nconst isPromiseLike = x => isFunction(x.then);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = arg => {\n  const type = typeof arg;\n  const constructor = arg && arg.constructor;\n  const isDate = constructor == Date;\n  let result;\n  let index;\n  if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (constructor == Array) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (constructor == OBJECT) {\n      // Object, sort keys.\n      result = '#';\n      const keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst hasRequestAnimationFrame = () => isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key) => {\n  const state = SWRGlobalState.get(cache);\n  return [\n  // Getter\n  () => !isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n  // Setter\n  info => {\n    if (!isUndefined(key)) {\n      const prev = cache.get(key);\n      // Before writing to the store, we keep the value in the initial cache\n      // if it's not there yet.\n      if (!(key in INITIAL_CACHE)) {\n        INITIAL_CACHE[key] = prev;\n      }\n      state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n    }\n  },\n  // Subscriber\n  state[6],\n  // Get server cache snapshot\n  () => {\n    if (!isUndefined(key)) {\n      // If the cache was updated on the client, we return the stored initial value.\n      if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n    }\n    // If we haven't done any client-side updates, we return the current value.\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  }];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */\nlet online = true;\nconst isOnline = () => online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [window.addEventListener.bind(window), window.removeEventListener.bind(window)] : [noop, noop];\nconst isVisible = () => {\n  const visibilityState = isDocumentDefined && document.visibilityState;\n  return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = callback => {\n  // focus revalidate\n  if (isDocumentDefined) {\n    document.addEventListener('visibilitychange', callback);\n  }\n  onWindowEvent('focus', callback);\n  return () => {\n    if (isDocumentDefined) {\n      document.removeEventListener('visibilitychange', callback);\n    }\n    offWindowEvent('focus', callback);\n  };\n};\nconst initReconnect = callback => {\n  // revalidate on reconnected\n  const onOnline = () => {\n    online = true;\n    callback();\n  };\n  // nothing to revalidate, just update the status\n  const onOffline = () => {\n    online = false;\n  };\n  onWindowEvent('online', onOnline);\n  onWindowEvent('offline', onOffline);\n  return () => {\n    offWindowEvent('online', onOnline);\n    offWindowEvent('offline', onOffline);\n  };\n};\nconst preset = {\n  isOnline,\n  isVisible\n};\nconst defaultConfigOptions = {\n  initFocus,\n  initReconnect\n};\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nconst rAF = f => hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && (['slow-2g', '2g'].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\nconst serialize = key => {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  const args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n  return [key, args];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = () => ++__timestamp;\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nconst ERROR_REVALIDATE_EVENT = 3;\nvar events = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n  FOCUS_EVENT: FOCUS_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT\n};\nasync function internalMutate() {\n  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  const [cache, _key, _data, _opts] = args;\n  // When passing as a boolean, it's explicitly used to disable/enable\n  // revalidation.\n  const options = mergeObjects({\n    populateCache: true,\n    throwOnError: true\n  }, typeof _opts === 'boolean' ? {\n    revalidate: _opts\n  } : _opts || {});\n  let populateCache = options.populateCache;\n  const rollbackOnErrorOption = options.rollbackOnError;\n  let optimisticData = options.optimisticData;\n  const rollbackOnError = error => {\n    return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n  };\n  const throwOnError = options.throwOnError;\n  // If the second argument is a key filter, return the mutation results for all\n  // filtered keys.\n  if (isFunction(_key)) {\n    const keyFilter = _key;\n    const matchedKeys = [];\n    const it = cache.keys();\n    for (const key of it) {\n      if (\n      // Skip the special useSWRInfinite and useSWRSubscription keys.\n      !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n        matchedKeys.push(key);\n      }\n    }\n    return Promise.all(matchedKeys.map(mutateByKey));\n  }\n  return mutateByKey(_key);\n  async function mutateByKey(_k) {\n    // Serialize key\n    const [key] = serialize(_k);\n    if (!key) return;\n    const [get, set] = createCacheHelper(cache, key);\n    const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n    const startRevalidate = () => {\n      const revalidators = EVENT_REVALIDATORS[key];\n      const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n      if (revalidate) {\n        // Invalidate the key by deleting the concurrent request markers so new\n        // requests will not be deduped.\n        delete FETCH[key];\n        delete PRELOAD[key];\n        if (revalidators && revalidators[0]) {\n          return revalidators[0](MUTATE_EVENT).then(() => get().data);\n        }\n      }\n      return get().data;\n    };\n    // If there is no new data provided, revalidate the key with current state.\n    if (args.length < 3) {\n      // Revalidate and broadcast state.\n      return startRevalidate();\n    }\n    let data = _data;\n    let error;\n    // Update global timestamps.\n    const beforeMutationTs = getTimestamp();\n    MUTATION[key] = [beforeMutationTs, 0];\n    const hasOptimisticData = !isUndefined(optimisticData);\n    const state = get();\n    // `displayedData` is the current value on screen. It could be the optimistic value\n    // that is going to be overridden by a `committedData`, or get reverted back.\n    // `committedData` is the validated value that comes from a fetch or mutation.\n    const displayedData = state.data;\n    const currentData = state._c;\n    const committedData = isUndefined(currentData) ? displayedData : currentData;\n    // Do optimistic data update.\n    if (hasOptimisticData) {\n      optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n      // When we set optimistic data, backup the current committedData data in `_c`.\n      set({\n        data: optimisticData,\n        _c: committedData\n      });\n    }\n    if (isFunction(data)) {\n      // `data` is a function, call it passing current cache value.\n      try {\n        data = data(committedData);\n      } catch (err) {\n        // If it throws an error synchronously, we shouldn't update the cache.\n        error = err;\n      }\n    }\n    // `data` is a promise/thenable, resolve the final data first.\n    if (data && isPromiseLike(data)) {\n      // This means that the mutation is async, we need to check timestamps to\n      // avoid race conditions.\n      data = await data.catch(err => {\n        error = err;\n      });\n      // Check if other mutations have occurred since we've started this mutation.\n      // If there's a race we don't update cache or broadcast the change,\n      // just return the data.\n      if (beforeMutationTs !== MUTATION[key][0]) {\n        if (error) throw error;\n        return data;\n      } else if (error && hasOptimisticData && rollbackOnError(error)) {\n        // Rollback. Always populate the cache in this case but without\n        // transforming the data.\n        populateCache = true;\n        // Reset data to be the latest committed data, and clear the `_c` value.\n        set({\n          data: committedData,\n          _c: UNDEFINED\n        });\n      }\n    }\n    // If we should write back the cache after request.\n    if (populateCache) {\n      if (!error) {\n        // Transform the result into data.\n        if (isFunction(populateCache)) {\n          const populateCachedData = populateCache(data, committedData);\n          set({\n            data: populateCachedData,\n            error: UNDEFINED,\n            _c: UNDEFINED\n          });\n        } else {\n          // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n          set({\n            data,\n            error: UNDEFINED,\n            _c: UNDEFINED\n          });\n        }\n      }\n    }\n    // Reset the timestamp to mark the mutation has ended.\n    MUTATION[key][1] = getTimestamp();\n    // Update existing SWR Hooks' internal states:\n    Promise.resolve(startRevalidate()).then(() => {\n      // The mutation and revalidation are ended, we can clear it since the data is\n      // not an optimistic value anymore.\n      set({\n        _c: UNDEFINED\n      });\n    });\n    // Throw error or return data\n    if (error) {\n      if (throwOnError) throw error;\n      return;\n    }\n    return data;\n  }\n}\nconst revalidateAllKeys = (revalidators, type) => {\n  for (const key in revalidators) {\n    if (revalidators[key][0]) revalidators[key][0](type);\n  }\n};\nconst initCache = (provider, options) => {\n  // The global state for a specific provider will be used to deduplicate\n  // requests and store listeners. As well as a mutate function that is bound to\n  // the cache.\n  // The provider's global state might be already initialized. Let's try to get the\n  // global state associated with the provider first.\n  if (!SWRGlobalState.has(provider)) {\n    const opts = mergeObjects(defaultConfigOptions, options);\n    // If there's no global state bound to the provider, create a new one with the\n    // new mutate function.\n    const EVENT_REVALIDATORS = {};\n    const mutate = internalMutate.bind(UNDEFINED, provider);\n    let unmount = noop;\n    const subscriptions = {};\n    const subscribe = (key, callback) => {\n      const subs = subscriptions[key] || [];\n      subscriptions[key] = subs;\n      subs.push(callback);\n      return () => subs.splice(subs.indexOf(callback), 1);\n    };\n    const setter = (key, value, prev) => {\n      provider.set(key, value);\n      const subs = subscriptions[key];\n      if (subs) {\n        for (const fn of subs) {\n          fn(value, prev);\n        }\n      }\n    };\n    const initProvider = () => {\n      if (!SWRGlobalState.has(provider)) {\n        // Update the state if it's new, or if the provider has been extended.\n        SWRGlobalState.set(provider, [EVENT_REVALIDATORS, {}, {}, {}, mutate, setter, subscribe]);\n        if (!IS_SERVER) {\n          // When listening to the native events for auto revalidations,\n          // we intentionally put a delay (setTimeout) here to make sure they are\n          // fired after immediate JavaScript executions, which can be\n          // React's state updates.\n          // This avoids some unnecessary revalidations such as\n          // https://github.com/vercel/swr/issues/1680.\n          const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n          const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n          unmount = () => {\n            releaseFocus && releaseFocus();\n            releaseReconnect && releaseReconnect();\n            // When un-mounting, we need to remove the cache provider from the state\n            // storage too because it's a side-effect. Otherwise, when re-mounting we\n            // will not re-register those event listeners.\n            SWRGlobalState.delete(provider);\n          };\n        }\n      }\n    };\n    initProvider();\n    // This is a new provider, we need to initialize it and setup DOM events\n    // listeners for `focus` and `reconnect` actions.\n    // We might want to inject an extra layer on top of `provider` in the future,\n    // such as key serialization, auto GC, etc.\n    // For now, it's just a `Map` interface without any modifications.\n    return [provider, mutate, initProvider, unmount];\n  }\n  return [provider, SWRGlobalState.get(provider)[4]];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts) => {\n  const maxRetryCount = config.errorRetryCount;\n  const currentRetryCount = opts.retryCount;\n  // Exponential backoff\n  const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n    return;\n  }\n  setTimeout(revalidate, timeout, opts);\n};\nconst compare = (currentData, newData) => stableHash(currentData) == stableHash(newData);\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n  // events\n  onLoadingSlow: noop,\n  onSuccess: noop,\n  onError: noop,\n  onErrorRetry,\n  onDiscarded: noop,\n  // switches\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  revalidateIfStale: true,\n  shouldRetryOnError: true,\n  // timeouts\n  errorRetryInterval: slowConnection ? 10000 : 5000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: slowConnection ? 5000 : 3000,\n  // providers\n  compare,\n  isPaused: () => false,\n  cache,\n  mutate,\n  fallback: {}\n},\n// use web preset by default\npreset);\nconst mergeConfigs = (a, b) => {\n  // Need to create a new object to avoid mutating the original here.\n  const v = mergeObjects(a, b);\n  // If two configs are provided, merge their `use` and `fallback` options.\n  if (b) {\n    const {\n      use: u1,\n      fallback: f1\n    } = a;\n    const {\n      use: u2,\n      fallback: f2\n    } = b;\n    if (u1 && u2) {\n      v.use = u1.concat(u2);\n    }\n    if (f1 && f2) {\n      v.fallback = mergeObjects(f1, f2);\n    }\n  }\n  return v;\n};\nconst SWRConfigContext = createContext({});\nconst SWRConfig = props => {\n  const {\n    value\n  } = props;\n  const parentConfig = useContext(SWRConfigContext);\n  const isFunctionalConfig = isFunction(value);\n  const config = useMemo(() => isFunctionalConfig ? value(parentConfig) : value, [isFunctionalConfig, parentConfig, value]);\n  // Extend parent context values and middleware.\n  const extendedConfig = useMemo(() => isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [isFunctionalConfig, parentConfig, config]);\n  // Should not use the inherited provider.\n  const provider = config && config.provider;\n  // initialize the cache only on first access.\n  const cacheContextRef = useRef(UNDEFINED);\n  if (provider && !cacheContextRef.current) {\n    cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n  }\n  const cacheContext = cacheContextRef.current;\n  // Override the cache if a new provider is given.\n  if (cacheContext) {\n    extendedConfig.cache = cacheContext[0];\n    extendedConfig.mutate = cacheContext[1];\n  }\n  // Unsubscribe events.\n  useIsomorphicLayoutEffect(() => {\n    if (cacheContext) {\n      cacheContext[2] && cacheContext[2]();\n      return cacheContext[3];\n    }\n  }, []);\n  return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n    value: extendedConfig\n  }));\n};\nconst INFINITE_PREFIX = '$inf$';\n\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = () => {\n  if (enableDevtools) {\n    // @ts-expect-error\n    window.__SWR_DEVTOOLS_REACT__ = React;\n  }\n};\nconst normalize = args => {\n  return isFunction(args[1]) ? [args[0], args[1], args[2] || {}] : [args[0], null, (args[1] === null ? args[2] : args[1]) || {}];\n};\nconst useSWRConfig = () => {\n  return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\nconst preload = (key_, fetcher) => {\n  const [key, fnArg] = serialize(key_);\n  const [,,, PRELOAD] = SWRGlobalState.get(cache);\n  // Prevent preload to be called multiple times before used.\n  if (PRELOAD[key]) return PRELOAD[key];\n  const req = fetcher(fnArg);\n  PRELOAD[key] = req;\n  return req;\n};\nconst middleware = useSWRNext => (key_, fetcher_, config) => {\n  // fetcher might be a sync function, so this should not be an async function\n  const fetcher = fetcher_ && function () {\n    const [key] = serialize(key_);\n    const [,,, PRELOAD] = SWRGlobalState.get(cache);\n    if (key.startsWith(INFINITE_PREFIX)) {\n      // we want the infinite fetcher to be called.\n      // handling of the PRELOAD cache happens there.\n      return fetcher_(...arguments);\n    }\n    const req = PRELOAD[key];\n    if (isUndefined(req)) return fetcher_(...arguments);\n    delete PRELOAD[key];\n    return req;\n  };\n  return useSWRNext(key_, fetcher, config);\n};\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = hook => {\n  return function useSWRArgs() {\n    // Get the default and inherited configuration.\n    const fallbackConfig = useSWRConfig();\n    // Normalize arguments.\n    for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const [key, fn, _config] = normalize(args);\n    // Merge configurations.\n    const config = mergeConfigs(fallbackConfig, _config);\n    // Apply middleware\n    let next = hook;\n    const {\n      use\n    } = config;\n    const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n    for (let i = middleware.length; i--;) {\n      next = middleware[i](next);\n    }\n    return next(key, fn || config.fetcher || null, config);\n  };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback) => {\n  const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n  keyedRevalidators.push(callback);\n  return () => {\n    const index = keyedRevalidators.indexOf(callback);\n    if (index >= 0) {\n      // O(1): faster than splice\n      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n      keyedRevalidators.pop();\n    }\n  };\n};\n\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware) => {\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    const [key, fn, config] = normalize(args);\n    const uses = (config.use || []).concat(middleware);\n    return useSWR(key, fn, {\n      ...config,\n      use: uses\n    });\n  };\n};\nsetupDevTools();\nexport { INFINITE_PREFIX, IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isPromiseLike, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, events as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, withArgs, withMiddleware };","map":{"version":3,"names":["React","useEffect","useLayoutEffect","createContext","useContext","useMemo","useRef","createElement","noop","UNDEFINED","OBJECT","Object","isUndefined","v","isFunction","mergeObjects","a","b","isPromiseLike","x","then","table","WeakMap","counter","stableHash","arg","type","constructor","isDate","Date","result","index","RegExp","get","set","Array","length","keys","sort","pop","toJSON","toString","JSON","stringify","SWRGlobalState","EMPTY_CACHE","INITIAL_CACHE","STR_UNDEFINED","isWindowDefined","window","isDocumentDefined","document","hasRequestAnimationFrame","createCacheHelper","cache","key","state","info","prev","online","isOnline","onWindowEvent","offWindowEvent","addEventListener","bind","removeEventListener","isVisible","visibilityState","initFocus","callback","initReconnect","onOnline","onOffline","preset","defaultConfigOptions","IS_REACT_LEGACY","useId","IS_SERVER","rAF","f","setTimeout","useIsomorphicLayoutEffect","navigatorConnection","navigator","connection","slowConnection","includes","effectiveType","saveData","serialize","err","args","isArray","__timestamp","getTimestamp","FOCUS_EVENT","RECONNECT_EVENT","MUTATE_EVENT","ERROR_REVALIDATE_EVENT","events","__proto__","internalMutate","_len","arguments","_key2","_key","_data","_opts","options","populateCache","throwOnError","revalidate","rollbackOnErrorOption","rollbackOnError","optimisticData","error","keyFilter","matchedKeys","it","test","_k","push","Promise","all","map","mutateByKey","EVENT_REVALIDATORS","MUTATION","FETCH","PRELOAD","startRevalidate","revalidators","data","beforeMutationTs","hasOptimisticData","displayedData","currentData","_c","committedData","catch","populateCachedData","resolve","revalidateAllKeys","initCache","provider","has","opts","mutate","unmount","subscriptions","subscribe","subs","splice","indexOf","setter","value","fn","initProvider","releaseFocus","releaseReconnect","delete","onErrorRetry","_","__","config","maxRetryCount","errorRetryCount","currentRetryCount","retryCount","timeout","Math","random","errorRetryInterval","compare","newData","Map","defaultConfig","onLoadingSlow","onSuccess","onError","onDiscarded","revalidateOnFocus","revalidateOnReconnect","revalidateIfStale","shouldRetryOnError","focusThrottleInterval","dedupingInterval","loadingTimeout","isPaused","fallback","mergeConfigs","use","u1","f1","u2","f2","concat","SWRConfigContext","SWRConfig","props","parentConfig","isFunctionalConfig","extendedConfig","cacheContextRef","current","cacheContext","Provider","INFINITE_PREFIX","enableDevtools","__SWR_DEVTOOLS_USE__","setupDevTools","__SWR_DEVTOOLS_REACT__","normalize","useSWRConfig","preload","key_","fetcher","fnArg","req","middleware","useSWRNext","fetcher_","startsWith","BUILT_IN_MIDDLEWARE","withArgs","hook","useSWRArgs","fallbackConfig","_len2","_key3","_config","next","i","subscribeCallback","callbacks","keyedRevalidators","withMiddleware","useSWR","_len3","_key4","uses","revalidateEvents"],"sources":["/Users/shaud/Desktop/c6-mycode/cs/capstone/node_modules/swr/dist/_internal/index.mjs"],"sourcesContent":["import React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement } from 'react';\n\n// Shared state between server components and client components\nconst noop = ()=>{};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nconst UNDEFINED = /*#__NOINLINE__*/ noop();\nconst OBJECT = Object;\nconst isUndefined = (v)=>v === UNDEFINED;\nconst isFunction = (v)=>typeof v == 'function';\nconst mergeObjects = (a, b)=>({\n        ...a,\n        ...b\n    });\nconst isPromiseLike = (x)=>isFunction(x.then);\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nconst table = new WeakMap();\n// counter of the key\nlet counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nconst stableHash = (arg)=>{\n    const type = typeof arg;\n    const constructor = arg && arg.constructor;\n    const isDate = constructor == Date;\n    let result;\n    let index;\n    if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n        // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n        // If it's already hashed, directly return the result.\n        result = table.get(arg);\n        if (result) return result;\n        // Store the hash first for circular reference detection before entering the\n        // recursive `stableHash` calls.\n        // For other objects like set and map, we use this id directly as the hash.\n        result = ++counter + '~';\n        table.set(arg, result);\n        if (constructor == Array) {\n            // Array.\n            result = '@';\n            for(index = 0; index < arg.length; index++){\n                result += stableHash(arg[index]) + ',';\n            }\n            table.set(arg, result);\n        }\n        if (constructor == OBJECT) {\n            // Object, sort keys.\n            result = '#';\n            const keys = OBJECT.keys(arg).sort();\n            while(!isUndefined(index = keys.pop())){\n                if (!isUndefined(arg[index])) {\n                    result += index + ':' + stableHash(arg[index]) + ',';\n                }\n            }\n            table.set(arg, result);\n        }\n    } else {\n        result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n    }\n    return result;\n};\n\n// Global state used to deduplicate requests and store listeners\nconst SWRGlobalState = new WeakMap();\n\nconst EMPTY_CACHE = {};\nconst INITIAL_CACHE = {};\nconst STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nconst isWindowDefined = typeof window != STR_UNDEFINED;\nconst isDocumentDefined = typeof document != STR_UNDEFINED;\nconst hasRequestAnimationFrame = ()=>isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\nconst createCacheHelper = (cache, key)=>{\n    const state = SWRGlobalState.get(cache);\n    return [\n        // Getter\n        ()=>!isUndefined(key) && cache.get(key) || EMPTY_CACHE,\n        // Setter\n        (info)=>{\n            if (!isUndefined(key)) {\n                const prev = cache.get(key);\n                // Before writing to the store, we keep the value in the initial cache\n                // if it's not there yet.\n                if (!(key in INITIAL_CACHE)) {\n                    INITIAL_CACHE[key] = prev;\n                }\n                state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n            }\n        },\n        // Subscriber\n        state[6],\n        // Get server cache snapshot\n        ()=>{\n            if (!isUndefined(key)) {\n                // If the cache was updated on the client, we return the stored initial value.\n                if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n            }\n            // If we haven't done any client-side updates, we return the current value.\n            return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n        }\n    ];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */ let online = true;\nconst isOnline = ()=>online;\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nconst [onWindowEvent, offWindowEvent] = isWindowDefined && window.addEventListener ? [\n    window.addEventListener.bind(window),\n    window.removeEventListener.bind(window)\n] : [\n    noop,\n    noop\n];\nconst isVisible = ()=>{\n    const visibilityState = isDocumentDefined && document.visibilityState;\n    return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nconst initFocus = (callback)=>{\n    // focus revalidate\n    if (isDocumentDefined) {\n        document.addEventListener('visibilitychange', callback);\n    }\n    onWindowEvent('focus', callback);\n    return ()=>{\n        if (isDocumentDefined) {\n            document.removeEventListener('visibilitychange', callback);\n        }\n        offWindowEvent('focus', callback);\n    };\n};\nconst initReconnect = (callback)=>{\n    // revalidate on reconnected\n    const onOnline = ()=>{\n        online = true;\n        callback();\n    };\n    // nothing to revalidate, just update the status\n    const onOffline = ()=>{\n        online = false;\n    };\n    onWindowEvent('online', onOnline);\n    onWindowEvent('offline', onOffline);\n    return ()=>{\n        offWindowEvent('online', onOnline);\n        offWindowEvent('offline', onOffline);\n    };\n};\nconst preset = {\n    isOnline,\n    isVisible\n};\nconst defaultConfigOptions = {\n    initFocus,\n    initReconnect\n};\n\nconst IS_REACT_LEGACY = !React.useId;\nconst IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nconst rAF = (f)=>hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nconst useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nconst navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nconst slowConnection = !IS_SERVER && navigatorConnection && ([\n    'slow-2g',\n    '2g'\n].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\n\nconst serialize = (key)=>{\n    if (isFunction(key)) {\n        try {\n            key = key();\n        } catch (err) {\n            // dependencies not ready\n            key = '';\n        }\n    }\n    // Use the original key as the argument of fetcher. This can be a string or an\n    // array of values.\n    const args = key;\n    // If key is not falsy, or not an empty array, hash it.\n    key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n    return [\n        key,\n        args\n    ];\n};\n\n// Global timestamp.\nlet __timestamp = 0;\nconst getTimestamp = ()=>++__timestamp;\n\nconst FOCUS_EVENT = 0;\nconst RECONNECT_EVENT = 1;\nconst MUTATE_EVENT = 2;\nconst ERROR_REVALIDATE_EVENT = 3;\n\nvar events = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n  FOCUS_EVENT: FOCUS_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT\n};\n\nasync function internalMutate(...args) {\n    const [cache, _key, _data, _opts] = args;\n    // When passing as a boolean, it's explicitly used to disable/enable\n    // revalidation.\n    const options = mergeObjects({\n        populateCache: true,\n        throwOnError: true\n    }, typeof _opts === 'boolean' ? {\n        revalidate: _opts\n    } : _opts || {});\n    let populateCache = options.populateCache;\n    const rollbackOnErrorOption = options.rollbackOnError;\n    let optimisticData = options.optimisticData;\n    const rollbackOnError = (error)=>{\n        return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n    };\n    const throwOnError = options.throwOnError;\n    // If the second argument is a key filter, return the mutation results for all\n    // filtered keys.\n    if (isFunction(_key)) {\n        const keyFilter = _key;\n        const matchedKeys = [];\n        const it = cache.keys();\n        for (const key of it){\n            if (// Skip the special useSWRInfinite and useSWRSubscription keys.\n            !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n            }\n        }\n        return Promise.all(matchedKeys.map(mutateByKey));\n    }\n    return mutateByKey(_key);\n    async function mutateByKey(_k) {\n        // Serialize key\n        const [key] = serialize(_k);\n        if (!key) return;\n        const [get, set] = createCacheHelper(cache, key);\n        const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(cache);\n        const startRevalidate = ()=>{\n            const revalidators = EVENT_REVALIDATORS[key];\n            const revalidate = isFunction(options.revalidate) ? options.revalidate(get().data, _k) : options.revalidate !== false;\n            if (revalidate) {\n                // Invalidate the key by deleting the concurrent request markers so new\n                // requests will not be deduped.\n                delete FETCH[key];\n                delete PRELOAD[key];\n                if (revalidators && revalidators[0]) {\n                    return revalidators[0](MUTATE_EVENT).then(()=>get().data);\n                }\n            }\n            return get().data;\n        };\n        // If there is no new data provided, revalidate the key with current state.\n        if (args.length < 3) {\n            // Revalidate and broadcast state.\n            return startRevalidate();\n        }\n        let data = _data;\n        let error;\n        // Update global timestamps.\n        const beforeMutationTs = getTimestamp();\n        MUTATION[key] = [\n            beforeMutationTs,\n            0\n        ];\n        const hasOptimisticData = !isUndefined(optimisticData);\n        const state = get();\n        // `displayedData` is the current value on screen. It could be the optimistic value\n        // that is going to be overridden by a `committedData`, or get reverted back.\n        // `committedData` is the validated value that comes from a fetch or mutation.\n        const displayedData = state.data;\n        const currentData = state._c;\n        const committedData = isUndefined(currentData) ? displayedData : currentData;\n        // Do optimistic data update.\n        if (hasOptimisticData) {\n            optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n            // When we set optimistic data, backup the current committedData data in `_c`.\n            set({\n                data: optimisticData,\n                _c: committedData\n            });\n        }\n        if (isFunction(data)) {\n            // `data` is a function, call it passing current cache value.\n            try {\n                data = data(committedData);\n            } catch (err) {\n                // If it throws an error synchronously, we shouldn't update the cache.\n                error = err;\n            }\n        }\n        // `data` is a promise/thenable, resolve the final data first.\n        if (data && isPromiseLike(data)) {\n            // This means that the mutation is async, we need to check timestamps to\n            // avoid race conditions.\n            data = await data.catch((err)=>{\n                error = err;\n            });\n            // Check if other mutations have occurred since we've started this mutation.\n            // If there's a race we don't update cache or broadcast the change,\n            // just return the data.\n            if (beforeMutationTs !== MUTATION[key][0]) {\n                if (error) throw error;\n                return data;\n            } else if (error && hasOptimisticData && rollbackOnError(error)) {\n                // Rollback. Always populate the cache in this case but without\n                // transforming the data.\n                populateCache = true;\n                // Reset data to be the latest committed data, and clear the `_c` value.\n                set({\n                    data: committedData,\n                    _c: UNDEFINED\n                });\n            }\n        }\n        // If we should write back the cache after request.\n        if (populateCache) {\n            if (!error) {\n                // Transform the result into data.\n                if (isFunction(populateCache)) {\n                    const populateCachedData = populateCache(data, committedData);\n                    set({\n                        data: populateCachedData,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                } else {\n                    // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                    set({\n                        data,\n                        error: UNDEFINED,\n                        _c: UNDEFINED\n                    });\n                }\n            }\n        }\n        // Reset the timestamp to mark the mutation has ended.\n        MUTATION[key][1] = getTimestamp();\n        // Update existing SWR Hooks' internal states:\n        Promise.resolve(startRevalidate()).then(()=>{\n            // The mutation and revalidation are ended, we can clear it since the data is\n            // not an optimistic value anymore.\n            set({\n                _c: UNDEFINED\n            });\n        });\n        // Throw error or return data\n        if (error) {\n            if (throwOnError) throw error;\n            return;\n        }\n        return data;\n    }\n}\n\nconst revalidateAllKeys = (revalidators, type)=>{\n    for(const key in revalidators){\n        if (revalidators[key][0]) revalidators[key][0](type);\n    }\n};\nconst initCache = (provider, options)=>{\n    // The global state for a specific provider will be used to deduplicate\n    // requests and store listeners. As well as a mutate function that is bound to\n    // the cache.\n    // The provider's global state might be already initialized. Let's try to get the\n    // global state associated with the provider first.\n    if (!SWRGlobalState.has(provider)) {\n        const opts = mergeObjects(defaultConfigOptions, options);\n        // If there's no global state bound to the provider, create a new one with the\n        // new mutate function.\n        const EVENT_REVALIDATORS = {};\n        const mutate = internalMutate.bind(UNDEFINED, provider);\n        let unmount = noop;\n        const subscriptions = {};\n        const subscribe = (key, callback)=>{\n            const subs = subscriptions[key] || [];\n            subscriptions[key] = subs;\n            subs.push(callback);\n            return ()=>subs.splice(subs.indexOf(callback), 1);\n        };\n        const setter = (key, value, prev)=>{\n            provider.set(key, value);\n            const subs = subscriptions[key];\n            if (subs) {\n                for (const fn of subs){\n                    fn(value, prev);\n                }\n            }\n        };\n        const initProvider = ()=>{\n            if (!SWRGlobalState.has(provider)) {\n                // Update the state if it's new, or if the provider has been extended.\n                SWRGlobalState.set(provider, [\n                    EVENT_REVALIDATORS,\n                    {},\n                    {},\n                    {},\n                    mutate,\n                    setter,\n                    subscribe\n                ]);\n                if (!IS_SERVER) {\n                    // When listening to the native events for auto revalidations,\n                    // we intentionally put a delay (setTimeout) here to make sure they are\n                    // fired after immediate JavaScript executions, which can be\n                    // React's state updates.\n                    // This avoids some unnecessary revalidations such as\n                    // https://github.com/vercel/swr/issues/1680.\n                    const releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n                    const releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n                    unmount = ()=>{\n                        releaseFocus && releaseFocus();\n                        releaseReconnect && releaseReconnect();\n                        // When un-mounting, we need to remove the cache provider from the state\n                        // storage too because it's a side-effect. Otherwise, when re-mounting we\n                        // will not re-register those event listeners.\n                        SWRGlobalState.delete(provider);\n                    };\n                }\n            }\n        };\n        initProvider();\n        // This is a new provider, we need to initialize it and setup DOM events\n        // listeners for `focus` and `reconnect` actions.\n        // We might want to inject an extra layer on top of `provider` in the future,\n        // such as key serialization, auto GC, etc.\n        // For now, it's just a `Map` interface without any modifications.\n        return [\n            provider,\n            mutate,\n            initProvider,\n            unmount\n        ];\n    }\n    return [\n        provider,\n        SWRGlobalState.get(provider)[4]\n    ];\n};\n\n// error retry\nconst onErrorRetry = (_, __, config, revalidate, opts)=>{\n    const maxRetryCount = config.errorRetryCount;\n    const currentRetryCount = opts.retryCount;\n    // Exponential backoff\n    const timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n    if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n        return;\n    }\n    setTimeout(revalidate, timeout, opts);\n};\nconst compare = (currentData, newData)=>stableHash(currentData) == stableHash(newData);\n// Default cache provider\nconst [cache, mutate] = initCache(new Map());\n// Default config\nconst defaultConfig = mergeObjects({\n    // events\n    onLoadingSlow: noop,\n    onSuccess: noop,\n    onError: noop,\n    onErrorRetry,\n    onDiscarded: noop,\n    // switches\n    revalidateOnFocus: true,\n    revalidateOnReconnect: true,\n    revalidateIfStale: true,\n    shouldRetryOnError: true,\n    // timeouts\n    errorRetryInterval: slowConnection ? 10000 : 5000,\n    focusThrottleInterval: 5 * 1000,\n    dedupingInterval: 2 * 1000,\n    loadingTimeout: slowConnection ? 5000 : 3000,\n    // providers\n    compare,\n    isPaused: ()=>false,\n    cache,\n    mutate,\n    fallback: {}\n}, // use web preset by default\npreset);\n\nconst mergeConfigs = (a, b)=>{\n    // Need to create a new object to avoid mutating the original here.\n    const v = mergeObjects(a, b);\n    // If two configs are provided, merge their `use` and `fallback` options.\n    if (b) {\n        const { use: u1, fallback: f1 } = a;\n        const { use: u2, fallback: f2 } = b;\n        if (u1 && u2) {\n            v.use = u1.concat(u2);\n        }\n        if (f1 && f2) {\n            v.fallback = mergeObjects(f1, f2);\n        }\n    }\n    return v;\n};\n\nconst SWRConfigContext = createContext({});\nconst SWRConfig = (props)=>{\n    const { value } = props;\n    const parentConfig = useContext(SWRConfigContext);\n    const isFunctionalConfig = isFunction(value);\n    const config = useMemo(()=>isFunctionalConfig ? value(parentConfig) : value, [\n        isFunctionalConfig,\n        parentConfig,\n        value\n    ]);\n    // Extend parent context values and middleware.\n    const extendedConfig = useMemo(()=>isFunctionalConfig ? config : mergeConfigs(parentConfig, config), [\n        isFunctionalConfig,\n        parentConfig,\n        config\n    ]);\n    // Should not use the inherited provider.\n    const provider = config && config.provider;\n    // initialize the cache only on first access.\n    const cacheContextRef = useRef(UNDEFINED);\n    if (provider && !cacheContextRef.current) {\n        cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n    }\n    const cacheContext = cacheContextRef.current;\n    // Override the cache if a new provider is given.\n    if (cacheContext) {\n        extendedConfig.cache = cacheContext[0];\n        extendedConfig.mutate = cacheContext[1];\n    }\n    // Unsubscribe events.\n    useIsomorphicLayoutEffect(()=>{\n        if (cacheContext) {\n            cacheContext[2] && cacheContext[2]();\n            return cacheContext[3];\n        }\n    }, []);\n    return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n        value: extendedConfig\n    }));\n};\n\nconst INFINITE_PREFIX = '$inf$';\n\n// @ts-expect-error\nconst enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nconst use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nconst setupDevTools = ()=>{\n    if (enableDevtools) {\n        // @ts-expect-error\n        window.__SWR_DEVTOOLS_REACT__ = React;\n    }\n};\n\nconst normalize = (args)=>{\n    return isFunction(args[1]) ? [\n        args[0],\n        args[1],\n        args[2] || {}\n    ] : [\n        args[0],\n        null,\n        (args[1] === null ? args[2] : args[1]) || {}\n    ];\n};\n\nconst useSWRConfig = ()=>{\n    return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\n\nconst preload = (key_, fetcher)=>{\n    const [key, fnArg] = serialize(key_);\n    const [, , , PRELOAD] = SWRGlobalState.get(cache);\n    // Prevent preload to be called multiple times before used.\n    if (PRELOAD[key]) return PRELOAD[key];\n    const req = fetcher(fnArg);\n    PRELOAD[key] = req;\n    return req;\n};\nconst middleware = (useSWRNext)=>(key_, fetcher_, config)=>{\n        // fetcher might be a sync function, so this should not be an async function\n        const fetcher = fetcher_ && ((...args)=>{\n            const [key] = serialize(key_);\n            const [, , , PRELOAD] = SWRGlobalState.get(cache);\n            if (key.startsWith(INFINITE_PREFIX)) {\n                // we want the infinite fetcher to be called.\n                // handling of the PRELOAD cache happens there.\n                return fetcher_(...args);\n            }\n            const req = PRELOAD[key];\n            if (isUndefined(req)) return fetcher_(...args);\n            delete PRELOAD[key];\n            return req;\n        });\n        return useSWRNext(key_, fetcher, config);\n    };\n\nconst BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nconst withArgs = (hook)=>{\n    return function useSWRArgs(...args) {\n        // Get the default and inherited configuration.\n        const fallbackConfig = useSWRConfig();\n        // Normalize arguments.\n        const [key, fn, _config] = normalize(args);\n        // Merge configurations.\n        const config = mergeConfigs(fallbackConfig, _config);\n        // Apply middleware\n        let next = hook;\n        const { use } = config;\n        const middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n        for(let i = middleware.length; i--;){\n            next = middleware[i](next);\n        }\n        return next(key, fn || config.fetcher || null, config);\n    };\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nconst subscribeCallback = (key, callbacks, callback)=>{\n    const keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n    keyedRevalidators.push(callback);\n    return ()=>{\n        const index = keyedRevalidators.indexOf(callback);\n        if (index >= 0) {\n            // O(1): faster than splice\n            keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n            keyedRevalidators.pop();\n        }\n    };\n};\n\n// Create a custom hook with a middleware\nconst withMiddleware = (useSWR, middleware)=>{\n    return (...args)=>{\n        const [key, fn, config] = normalize(args);\n        const uses = (config.use || []).concat(middleware);\n        return useSWR(key, fn, {\n            ...config,\n            use: uses\n        });\n    };\n};\n\nsetupDevTools();\n\nexport { INFINITE_PREFIX, IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isPromiseLike, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, events as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, withArgs, withMiddleware };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}