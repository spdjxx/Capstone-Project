{"ast":null,"code":"// src/logger.ts\nvar loggedMessages = /* @__PURE__ */new Set();\nvar logger = {\n  /**\n   * A custom logger that ensures messages are logged only once.\n   * Reduces noise and duplicated messages when logs are in a hot codepath.\n   */\n  warnOnce: msg => {\n    if (loggedMessages.has(msg)) {\n      return;\n    }\n    loggedMessages.add(msg);\n    console.warn(msg);\n  },\n  logOnce: msg => {\n    if (loggedMessages.has(msg)) {\n      return;\n    }\n    console.log(msg);\n    loggedMessages.add(msg);\n  }\n};\nexport { logger };","map":{"version":3,"names":["loggedMessages","Set","logger","warnOnce","msg","has","add","console","warn","logOnce","log"],"sources":["/Users/shaud/Desktop/c6-mycode/cs/capstone/node_modules/@clerk/shared/src/logger.ts"],"sourcesContent":["const loggedMessages: Set<string> = new Set();\n\nexport const logger = {\n  /**\n   * A custom logger that ensures messages are logged only once.\n   * Reduces noise and duplicated messages when logs are in a hot codepath.\n   */\n  warnOnce: (msg: string) => {\n    if (loggedMessages.has(msg)) {\n      return;\n    }\n\n    loggedMessages.add(msg);\n    console.warn(msg);\n  },\n  logOnce: (msg: string) => {\n    if (loggedMessages.has(msg)) {\n      return;\n    }\n\n    console.log(msg);\n    loggedMessages.add(msg);\n  },\n};\n"],"mappings":";AAAA,IAAMA,cAAA,GAA8B,mBAAIC,GAAA,CAAI;AAErC,IAAMC,MAAA,GAAS;EAAA;AAAA;AAAA;AAAA;EAKpBC,QAAA,EAAWC,GAAA,IAAgB;IACzB,IAAIJ,cAAA,CAAeK,GAAA,CAAID,GAAG,GAAG;MAC3B;IACF;IAEAJ,cAAA,CAAeM,GAAA,CAAIF,GAAG;IACtBG,OAAA,CAAQC,IAAA,CAAKJ,GAAG;EAClB;EACAK,OAAA,EAAUL,GAAA,IAAgB;IACxB,IAAIJ,cAAA,CAAeK,GAAA,CAAID,GAAG,GAAG;MAC3B;IACF;IAEAG,OAAA,CAAQG,GAAA,CAAIN,GAAG;IACfJ,cAAA,CAAeM,GAAA,CAAIF,GAAG;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}